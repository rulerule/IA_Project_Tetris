;TESTES ACCAO
(defvar testeaccao1 (cria-accao 3 (make-array '(2 3))))
(defvar testeaccao2 (cria-accao 2 (make-array '(3 4))))
(defvar testeaccaoblabla (cria-accao 8 (make-array '(2 2))))
(defvar pecablabla (accao-peca testeaccaoblabla))
(setf (aref pecablabla 0 0) T)
(setf (aref pecablabla 0 1) T)
(setf (aref pecablabla 1 0) T)
(setf (aref pecablabla 1 1) T)
(defvar testecol1 (accao-coluna testeaccao1))
(defvar testecol2 (accao-coluna testeaccao2))
(defvar testepeca1 (accao-peca testeaccao1))
(defvar testepeca2 (accao-peca testeaccao2))

;TESTES TABULEIRO
(defvar tabuleiroblabla (cria-tabuleiro))
(defvar tabuleiroCheio (cria-tabuleiro))
(defvar tabuleirowhiskas (cria-tabuleiro))
(dotimes (coluna 9) (tabuleiro-preenche! tabuleiroCheio 0 (+ coluna 1)) (tabuleiro-preenche! tabuleiroCheio 1 (+ coluna 1))(tabuleiro-preenche! tabuleiroCheio 2 (+ coluna 1))(tabuleiro-preenche! tabuleiroCheio 3 (+ coluna 1))(tabuleiro-preenche! tabuleiroCheio 4 (+ coluna 1)) (tabuleiro-preenche! tabuleiroCheio 5 (+ coluna 1))(tabuleiro-preenche! tabuleiroCheio 6 (+ coluna 1))(tabuleiro-preenche! tabuleiroCheio 7 (+ coluna 1))(tabuleiro-preenche! tabuleiroCheio 8 (+ coluna 1))(tabuleiro-preenche! tabuleiroCheio 9 (+ coluna 1))(tabuleiro-preenche! tabuleiroCheio 10 (+ coluna 1))(tabuleiro-preenche! tabuleiroCheio 11 (+ coluna 1))(tabuleiro-preenche! tabuleiroCheio 12 (+ coluna 1))(tabuleiro-preenche! tabuleiroCheio 13 (+ coluna 1))(tabuleiro-preenche! tabuleiroCheio 14 (+ coluna 1))(tabuleiro-preenche! tabuleiroCheio 15 (+ coluna 1))(tabuleiro-preenche! tabuleiroCheio 16 (+ coluna 1)))
(dotimes (coluna 9) (tabuleiro-preenche! tabuleiroblabla 0 (+ coluna 1))(tabuleiro-preenche! tabuleiroblabla 1 (+ coluna 1))(tabuleiro-preenche! tabuleiroblabla 2 (+ coluna 1)))
(defvar testetabuleiro (cria-tabuleiro))
(defvar tabuleirovazio (cria-tabuleiro))
(defvar testecopiatabuleiro (copia-tabuleiro testetabuleiro))
(setf (aref testetabuleiro 2 0) T)
(setf (aref testetabuleiro 2 1) T)
(setf (aref testetabuleiro 2 2) T)
(setf (aref testetabuleiro 2 3) T)
(setf (aref testetabuleiro 2 4) T)
(setf (aref testetabuleiro 2 5) T)
(setf (aref testetabuleiro 2 6) T)
(setf (aref testetabuleiro 2 7) T)
(setf (aref testetabuleiro 2 8) T)
(setf (aref testetabuleiro 2 9) T)
(setf (aref testecopiatabuleiro 3 4 ) T)
(defvar valorteste1 (tabuleiro-altura-coluna testetabuleiro 2))
(defvar valorteste2 (tabuleiro-altura-coluna testetabuleiro 3))
(tabuleiro-preenche! testetabuleiro 6 7)
(defvar testetabuleiroapagar(copia-tabuleiro testetabuleiro))
(setf (aref testetabuleiroapagar 17 2) T)
(tabuleiro-remove-linha! testetabuleiroapagar 3)
(setf (aref testetabuleiro 17 5) T)
(defvar tabuleirotestarcopy (copia-tabuleiro testetabuleiro))
(defvar tabuleirotestarcopydif (copia-tabuleiro testetabuleiroapagar))
(defvar testetabuleiro1 (copia-tabuleiro testetabuleiro))
(setf (aref testetabuleiro1 4 4) T)



;TESTES ESTADO
(defvar testeEstado1 (make-estado :pontos 10 :pecas-por-colocar '(1 2 3 4) :pecas-colocadas '(5 6 7) :tabuleiro testetabuleiro))
(defvar testeEstado11 (make-estado :pontos 10 :pecas-por-colocar '(1 2 3 4) :pecas-colocadas '(5 6 7) :tabuleiro testetabuleiro1))
(defvar testeEstado2 (make-estado :pontos 10 :pecas-por-colocar nil :pecas-colocadas '(7 8 9) :tabuleiro testetabuleiroapagar))
(defvar testeEstadoNaoFinal (make-estado :pontos 10 :pecas-por-colocar '(2 3 4) :pecas-colocadas '(2 3 4) :tabuleiro testetabuleiroapagar))
(defvar testeEstadoFuncaoSolucaoT (make-estado :pontos 10 :pecas-por-colocar nil :pecas-colocadas nil :tabuleiro testetabuleiroapagar))
(defvar testeEstadoFuncaoSolucaoF1 (make-estado :pontos 10 :pecas-por-colocar nil :pecas-colocadas nil :tabuleiro testetabuleiro))
(defvar testeEstadoFuncaoSolucaoF2 (make-estado :pontos 10 :pecas-por-colocar '(2 3) :pecas-colocadas nil :tabuleiro testetabuleiroapagar))
(defvar testeEstadoCopia (copia-estado testeEstado1))
(setf (estado-pontos testeEstadoCopia) 11)
(defvar testeEstadoI (make-estado :pontos 10 :pecas-por-colocar '(i) :pecas-colocadas '(5 6 7) :tabuleiro testetabuleiro))
(defvar testeEstadoJ (make-estado :pontos 10 :pecas-por-colocar '(j) :pecas-colocadas '(5 6 7) :tabuleiro testetabuleiro))
(defvar testeEstadoL (make-estado :pontos 10 :pecas-por-colocar '(l) :pecas-colocadas '(5 6 7) :tabuleiro testetabuleiro))
(defvar testeEstadoO (make-estado :pontos 10 :pecas-por-colocar '(o) :pecas-colocadas '(5 6 7) :tabuleiro testetabuleiro))
(defvar testeEstadoS (make-estado :pontos 10 :pecas-por-colocar '(s) :pecas-colocadas '(5 6 7) :tabuleiro testetabuleiro))
(defvar testeEstadoZ (make-estado :pontos 10 :pecas-por-colocar '(z) :pecas-colocadas '(5 6 7) :tabuleiro testetabuleiro))
(defvar testeEstadoT (make-estado :pontos 10 :pecas-por-colocar '(t) :pecas-colocadas '(5 6 7) :tabuleiro testetabuleiro))
(defvar testeEstadoValor (make-estado :pontos 100 :pecas-por-colocar '(i) :pecas-colocadas '(i) :tabuleiro testetabuleiro))
(defvar testeEstadoblabla (make-estado :pontos 0 :pecas-por-colocar '(o o o o o l l t t j j i i) :pecas-colocadas nil :tabuleiro tabuleiroblabla))


;TESTES PROBLEMA
(setf problemaTeste (make-problema :estado-inicial (make-estado :pontos 0 :tabuleiro tabuleiroCheio :pecas-colocadas () :pecas-por-colocar '(o o o o o l l t t j j i i)) :solucao #'solucao :accoes #'accoes :resultado #'resultado :custo-caminho #'(lambda (x) 0)))
(setf tabteste (cria-tabuleiro))
(dotimes (coluna 9) (tabuleiro-preenche! tabteste 0 (+ coluna 1))(tabuleiro-preenche! tabteste 1 (+ coluna 1))(tabuleiro-preenche! tabteste 2 (+ coluna 1)))
(setf ProblemaOriginal (make-problema :estado-inicial (make-estado :pontos 0 :tabuleiro tabteste :pecas-colocadas () :pecas-por-colocar '(o o o o o l l t t j j i i)) :solucao #'solucao :accoes #'accoes :resultado #'resultado :custo-caminho #'(lambda (x) 0)))
(setf ProblemaNulo (make-problema :estado-inicial (make-estado :pontos 0 :tabuleiro tabteste :pecas-colocadas () :pecas-por-colocar ()) :solucao #'solucao :accoes #'accoes :resultado #'resultado :custo-caminho #'(lambda (x) 0)))
